#include <bits/stdc++.h>
using namespace std;

bool canPlace(const vector<long long>& pos, int k, long long d) {
    long long last = pos[0];
    int cnt = 1;
    for (size_t i = 1; i < pos.size() && cnt < k; ++i) {
        if (pos[i] - last >= d) {
            last = pos[i];
            ++cnt;
        }
    }
    return cnt >= k;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int n, k;
    if (!(cin >> n >> k)) return 0;
    vector<long long> pos(n);
    for (int i = 0; i < n; ++i) cin >> pos[i];
    sort(pos.begin(), pos.end());
    long long lo = 0, hi = pos.back() - pos.front(), ans = 0;
    while (lo <= hi) {
        long long mid = lo + (hi - lo) / 2;
        if (canPlace(pos, k, mid)) { ans = mid; lo = mid + 1; }
        else hi = mid - 1;
    }
    cout << ans << '\n';
    return 0;
}

