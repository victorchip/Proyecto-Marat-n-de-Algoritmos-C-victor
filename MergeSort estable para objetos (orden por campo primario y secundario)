#include <bits/stdc++.h>
using namespace std;

struct Item {
    string name;
    int age;
    double score;
    int idx; // original index to illustrate stability (not required if sort stable)
};

bool cmp(const Item &a, const Item &b) {
    if (a.age != b.age) return a.age < b.age;
    if (a.score != b.score) return a.score > b.score; // score desc
    return a.idx < b.idx; // tie-breaker to show stability explicitly
}

void merge_sort(vector<Item>& a, int l, int r, vector<Item>& tmp) {
    if (r - l <= 0) return;
    int m = (l + r) >> 1;
    merge_sort(a, l, m, tmp);
    merge_sort(a, m+1, r, tmp);
    int i = l, j = m+1, k = l;
    while (i <= m && j <= r) {
        if (cmp(a[i], a[j])) tmp[k++] = a[i++];
        else tmp[k++] = a[j++];
    }
    while (i <= m) tmp[k++] = a[i++];
    while (j <= r) tmp[k++] = a[j++];
    for (int t = l; t <= r; ++t) a[t] = tmp[t];
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int n; if(!(cin >> n)) return 0;
    vector<Item> a(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i].name >> a[i].age >> a[i].score;
        a[i].idx = i;
    }
    vector<Item> tmp(n);
    merge_sort(a, 0, n-1, tmp);
    for (auto &it : a) cout << it.name << ' ' << it.age << ' ' << it.score << '\n';
    return 0;
}
